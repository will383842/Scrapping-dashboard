# ============================================================================
# SCRAPER PRO - DOCKER COMPOSE PRODUCTION v2.1 FIXED
# Version: 2.1 corrigée - Health checks simplifiés et configuration stable
# ============================================================================

version: '3.8'

services:
  # ==========================================================================
  # DATABASE - PostgreSQL avec configuration simplifiée
  # ==========================================================================
  db:
    image: postgres:15-alpine
    container_name: scraper-pro-db
    hostname: scraper-db
    env_file: .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-scraper_pro}
      POSTGRES_USER: ${POSTGRES_USER:-scraper_admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
      PGUSER: ${POSTGRES_USER:-scraper_admin}
      PGDATABASE: ${POSTGRES_DB:-scraper_pro}
    volumes:
      - pgdata:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./db/migrations:/docker-entrypoint-initdb.d/migrations:ro
      - ./config/postgresql.conf:/etc/postgresql/postgresql.conf:ro
      - ./backups:/backups
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    # Health check simplifié et robuste
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -h localhost -p 5432 -U ${POSTGRES_USER:-scraper_admin} -d ${POSTGRES_DB:-scraper_pro}"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped
    networks:
      - scraper-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.75'
        reservations:
          memory: 512M
          cpus: '0.5'
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "3"
    command: >
      postgres 
      -c config_file=/etc/postgresql/postgresql.conf
      -c logging_collector=off
      -c log_destination=stderr

  # ==========================================================================
  # REDIS - Cache et Coordination (configuration corrigée)
  # ==========================================================================
  redis:
    image: redis:7.2-alpine
    container_name: scraper-pro-redis
    hostname: scraper-redis
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
    command: >
      redis-server
      --requirepass ${REDIS_PASSWORD:-scraper_redis_2024}
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --save 900 1
      --save 300 10
      --save 60 10000
      --appendonly yes
      --appendfsync everysec
    # Health check simplifié pour Redis
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-scraper_redis_2024}", "ping"]
      interval: 15s
      timeout: 5s
      retries: 3
      start_period: 10s
    restart: unless-stopped
    networks:
      - scraper-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'
    logging:
      driver: json-file
      options:
        max-size: "5m"
        max-file: "2"

  # ==========================================================================
  # WORKER - Scraping Engine avec health check simplifié
  # ==========================================================================
  worker:
    build:
      context: .
      dockerfile: Dockerfile.worker
      args:
        PYTHON_VERSION: 3.11
        PLAYWRIGHT_VERSION: 1.47.0
    image: scraper-pro-worker:latest
    container_name: scraper-pro-worker
    hostname: scraper-worker
    env_file: .env
    environment:
      SCRAPY_SETTINGS_MODULE: scraper.settings
      PYTHONUNBUFFERED: 1
      PYTHONPATH: /app
      POSTGRES_HOST: db
      POSTGRES_CONNECT_TIMEOUT: 30
      POSTGRES_STATEMENT_TIMEOUT: 300000
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-scraper_redis_2024}
      REDIS_DB: 0
      PROXY_ROTATION_MODE: ${PROXY_ROTATION_DEFAULT_MODE:-per_spider}
      STICKY_TTL_SECONDS: ${PROXY_STICKY_TTL_DEFAULT:-180}
      RATE_LIMIT_ENABLED: "true"
      CIRCUIT_BREAKER_ENABLED: "true"
      ANTI_DUPLICATE_ENABLED: "true"
      CHECKPOINT_ENABLED: "true"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./sessions:/app/sessions:rw
      - ./logs:/app/logs:rw
      - ./config:/app/config:ro
      - playwright-cache:/home/scraper/.cache
    restart: unless-stopped
    networks:
      - scraper-network
    # Health check simplifié - juste vérifier que le process existe
    healthcheck:
      test: ["CMD", "pgrep", "-f", "python"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 120s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.5'
        reservations:
          memory: 1G
          cpus: '0.75'
    logging:
      driver: json-file
      options:
        max-size: "50m"
        max-file: "3"

  # ==========================================================================
  # DASHBOARD - Interface Web Streamlit avec health check corrigé
  # ==========================================================================
  dashboard:
    build:
      context: .
      dockerfile: Dockerfile.dashboard
      args:
        PYTHON_VERSION: 3.11
    image: scraper-pro-dashboard:latest
    container_name: scraper-pro-dashboard
    hostname: scraper-dashboard
    env_file: .env
    environment:
      STREAMLIT_SERVER_PORT: 8501
      STREAMLIT_SERVER_ADDRESS: 0.0.0.0
      STREAMLIT_SERVER_HEADLESS: true
      STREAMLIT_BROWSER_GATHER_USAGE_STATS: false
      POSTGRES_HOST: db
      POSTGRES_CONNECT_TIMEOUT: 30
      POSTGRES_STATEMENT_TIMEOUT: 300000
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD:-scraper_redis_2024}
      REDIS_DB: 1
      ENABLE_PROXY_MANAGEMENT: "true"
      ENABLE_ADVANCED_STATS: "true"
      ENABLE_REAL_TIME_MONITORING: "true"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "${DASHBOARD_PORT:-8501}:8501"
    volumes:
      - ./sessions:/app/sessions:rw
      - ./logs:/app/logs:rw  
      - ./backups:/app/backups:rw
      - ./config:/app/config:ro
    restart: unless-stopped
    networks:
      - scraper-network
    # Health check simplifié utilisant wget (installé dans le Dockerfile)
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8501/_stcore/health"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 90s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.75'
        reservations:
          memory: 512M
          cpus: '0.5'
    logging:
      driver: json-file
      options:
        max-size: "20m"
        max-file: "3"

  # ==========================================================================
  # MONITORING - Prometheus avec métriques Redis
  # ==========================================================================
  prometheus:
    image: prom/prometheus:latest
    container_name: scraper-pro-prometheus
    hostname: prometheus
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ./monitoring/rules:/etc/prometheus/rules:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - scraper-network
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # ==========================================================================
  # GRAFANA - Dashboards avancés
  # ==========================================================================
  grafana:
    image: grafana/grafana:latest
    container_name: scraper-pro-grafana
    hostname: grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_INSTALL_PLUGINS: "redis-datasource,grafana-clock-panel"
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
      - redis
    restart: unless-stopped
    networks:
      - scraper-network
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # ==========================================================================
  # REDIS EXPORTER - Métriques Redis pour Prometheus
  # ==========================================================================
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: scraper-pro-redis-exporter
    hostname: redis-exporter
    environment:
      REDIS_ADDR: "redis://redis:6379"
      REDIS_PASSWORD: ${REDIS_PASSWORD:-scraper_redis_2024}
    ports:
      - "9121:9121"
    depends_on:
      - redis
    restart: unless-stopped
    networks:
      - scraper-network
    profiles:
      - monitoring
    deploy:
      resources:
        limits:
          memory: 64M
          cpus: '0.1'

  # ==========================================================================
  # NGINX - Reverse proxy pour production
  # ==========================================================================
  nginx:
    image: nginx:alpine
    container_name: scraper-pro-nginx
    hostname: scraper-nginx
    ports:
      - "${HTTP_PORT:-80}:80"
      - "${HTTPS_PORT:-443}:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - dashboard
    restart: unless-stopped
    networks:
      - scraper-network
    profiles:
      - production
    deploy:
      resources:
        limits:
          memory: 128M
          cpus: '0.25'

# ==============================================================================
# VOLUMES - Persistance des données
# ==============================================================================
volumes:
  # Base de données PostgreSQL
  pgdata:
    driver: local

  # Cache Playwright
  playwright-cache:
    driver: local

  # Données Redis
  redis-data:
    driver: local

  # Données Prometheus
  prometheus-data:
    driver: local

  # Données Grafana
  grafana-data:
    driver: local

# ==============================================================================
# NETWORKS - Segmentation réseau avec Redis
# ==============================================================================
networks:
  # Réseau interne pour communication entre services
  scraper-network:
    driver: bridge
    name: scraper-pro-internal
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/24