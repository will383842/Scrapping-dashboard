# ============================================================================
# QUICK-FIX.PS1 - Script de D√©pannage Rapide Scraper Pro
# Version: 2.0 - Correction rapide des erreurs communes
# ============================================================================

param(
    [switch]$Restart = $false,
    [switch]$Reset = $false,
    [switch]$Logs = $false,
    [switch]$Status = $false
)

$ErrorActionPreference = "Continue"

function Write-ColorMessage($Message, $Color = "White") {
    $timestamp = Get-Date -Format "HH:mm:ss"
    Write-Host "$timestamp - $Message" -ForegroundColor $Color
}

function Write-Success($Message) { Write-ColorMessage $Message "Green" }
function Write-Warning($Message) { Write-ColorMessage $Message "Yellow" }
function Write-Error($Message) { Write-ColorMessage $Message "Red" }
function Write-Info($Message) { Write-ColorMessage $Message "Cyan" }

Write-Host "üîß SCRAPER PRO - D√âPANNAGE RAPIDE" -ForegroundColor Magenta

# Si aucun param√®tre, afficher le status
if (-not ($Restart -or $Reset -or $Logs -or $Status)) {
    $Status = $true
}

# ============================================================================
# STATUS DU SYST√àME
# ============================================================================
if ($Status) {
    Write-Info "=== STATUS DU SYST√àME ==="
    
    # V√©rifier Docker
    try {
        docker --version | Out-Null
        Write-Success "‚úÖ Docker disponible"
    } catch {
        Write-Error "‚ùå Docker non disponible"
        exit 1
    }
    
    # Status des conteneurs
    Write-Info "Status des conteneurs:"
    try {
        $containers = docker compose ps --format "table {{.Name}}\t{{.Status}}"
        if ($containers) {
            Write-Output $containers
        } else {
            Write-Warning "‚ö†Ô∏è Aucun conteneur en cours d'ex√©cution"
        }
    } catch {
        Write-Error "‚ùå Impossible de r√©cup√©rer le status des conteneurs"
    }
    
    # Test de sant√© rapide
    Write-Info "Tests de sant√©:"
    
    # Test DB
    try {
        docker compose exec -T db pg_isready -U scraper_admin -d scraper_pro 2>$null | Out-Null
        if ($LASTEXITCODE -eq 0) {
            Write-Success "‚úÖ Database: HEALTHY"
        } else {
            Write-Error "‚ùå Database: UNHEALTHY"
        }
    } catch {
        Write-Error "‚ùå Database: ERROR"
    }
    
    # Test Dashboard
    try {
        $response = Invoke-WebRequest -Uri "http://localhost:8501" -UseBasicParsing -TimeoutSec 5 -ErrorAction SilentlyContinue
        if ($response.StatusCode -eq 200) {
            Write-Success "‚úÖ Dashboard: HEALTHY (http://localhost:8501)"
        } else {
            Write-Warning "‚ö†Ô∏è Dashboard: UNHEALTHY"
        }
    } catch {
        Write-Warning "‚ö†Ô∏è Dashboard: UNREACHABLE"
    }
    
    # Erreurs r√©centes
    Write-Info "V√©rification des erreurs r√©centes..."
    try {
        $recentLogs = docker compose logs --since 5m 2>$null
        $errors = $recentLogs | Select-String -Pattern "error|Error|ERROR|exception|Exception|CRITICAL" | Select-Object -First 3
        
        if ($errors) {
            Write-Warning "‚ö†Ô∏è Erreurs d√©tect√©es dans les logs r√©cents:"
            foreach ($error in $errors) {
                Write-Host "  $($error.Line.Trim())" -ForegroundColor Red
            }
        } else {
            Write-Success "‚úÖ Aucune erreur critique r√©cente"
        }
    } catch {
        Write-Warning "‚ö†Ô∏è Impossible de v√©rifier les logs"
    }
}

# ============================================================================
# AFFICHAGE DES LOGS
# ============================================================================
if ($Logs) {
    Write-Info "=== LOGS DU SYST√àME ==="
    
    Write-Info "Logs des derni√®res 2 minutes:"
    try {
        docker compose logs --since 2m --timestamps
    } catch {
        Write-Error "‚ùå Impossible d'afficher les logs"
    }
}

# ============================================================================
# RED√âMARRAGE RAPIDE
# ============================================================================
if ($Restart) {
    Write-Info "=== RED√âMARRAGE RAPIDE ==="
    
    Write-Info "Red√©marrage des services..."
    try {
        docker compose restart
        Write-Success "‚úÖ Services red√©marr√©s"
        
        Write-Info "Attente de stabilisation (30 secondes)..."
        Start-Sleep -Seconds 30
        
        # Test rapide
        $dbTest = docker compose exec -T db pg_isready -U scraper_admin -d scraper_pro 2>$null
        if ($LASTEXITCODE -eq 0) {
            Write-Success "‚úÖ Database op√©rationnelle apr√®s red√©marrage"
        } else {
            Write-Warning "‚ö†Ô∏è Database peut n√©cessiter plus de temps"
        }
        
    } catch {
        Write-Error "‚ùå Erreur lors du red√©marrage"
    }
}

# ============================================================================
# RESET COMPLET
# ============================================================================
if ($Reset) {
    Write-Warning "=== RESET COMPLET ==="
    Write-Warning "ATTENTION: Cette op√©ration va supprimer tous les conteneurs et donn√©es!"
    
    $confirmation = Read-Host "Confirmez-vous le reset complet? (tapez 'YES' pour confirmer)"
    
    if ($confirmation -eq "YES") {
        try {
            Write-Info "Arr√™t et suppression des conteneurs..."
            docker compose down --volumes --remove-orphans
            
            Write-Info "Suppression des images..."
            docker image rm -f scraper-pro-worker scraper-pro-dashboard 2>$null
            
            Write-Info "Nettoyage Docker..."
            docker system prune -f
            
            Write-Info "Reconstruction et red√©marrage..."
            docker compose build --no-cache
            docker compose up -d
            
            Write-Success "‚úÖ Reset complet termin√©"
            Write-Info "Le syst√®me va prendre quelques minutes pour √™tre compl√®tement op√©rationnel"
            
        } catch {
            Write-Error "‚ùå Erreur lors du reset: $($_.Exception.Message)"
        }
    } else {
        Write-Info "Reset annul√©"
    }
}

# ============================================================================
# CONSEILS DE D√âPANNAGE
# ============================================================================
if (-not ($Logs -or $Reset)) {
    Write-Info ""
    Write-Info "üîß CONSEILS DE D√âPANNAGE:"
    Write-Info "  -Status     : Afficher le status d√©taill√©"
    Write-Info "  -Logs       : Afficher les logs r√©cents"
    Write-Info "  -Restart    : Red√©marrage rapide des services"
    Write-Info "  -Reset      : Reset complet (ATTENTION: supprime les donn√©es)"
    Write-Info ""
    Write-Info "üìã COMMANDES UTILES:"
    Write-Info "  docker compose ps           # Status conteneurs"
    Write-Info "  docker compose logs -f      # Logs en temps r√©el"
    Write-Info "  docker compose restart db   # Red√©marrer uniquement la DB"
    Write-Info "  docker compose down && docker compose up -d  # Red√©marrage complet"
    Write-Info ""
    Write-Info "üåê ACC√àS:"
    Write-Info "  Dashboard: http://localhost:8501"
    Write-Info "  Credentials: Voir fichier .env"
}

Write-Info "D√©pannage termin√© √† $(Get-Date -Format 'HH:mm:ss')"